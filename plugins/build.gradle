plugins {
    id "org.sonarqube" version "2.6"
}

apply plugin: 'application'

jacoco {
    toolVersion = "0.8.1"
}
mainClassName = 'org.tron.plugins.ArchiveManifest'
group 'org.tron'
version '1.0.0'

task version(type: Exec) {
    commandLine 'bash', '-c', '../ver.sh'
}
dependencies {
    //local libraries
    compile fileTree(dir: 'libs', include: '*.jar')
    // https://mvnrepository.com/artifact/com.beust/jcommander
    compile group: 'com.beust', name: 'jcommander', version: '1.78'

    compile 'com.github.halibobo1205.leveldb-java:leveldb:v0.12.5'
    compile 'com.github.halibobo1205.leveldb-java:leveldb-api:v0.12.5'
}

def createScript(project, mainClass, name) {
    project.tasks.create(name: name, type: CreateStartScripts) {
        outputDir = new File(project.buildDir, 'scripts')
        mainClassName = mainClass
        applicationName = name
        classpath = project.tasks[JavaPlugin.JAR_TASK_NAME].outputs.files + project.configurations.runtime
    }
    project.tasks[name].dependsOn(project.jar)
    project.applicationDistribution.with {
        into("bin") {
            from(project.tasks[name])
            fileMode = 0755
        }
    }
}

createScript(project, 'org.tron.plugins.ArchiveManifest', 'ArchiveManifest')

def releaseBinary = hasProperty('binaryRelease') ? getProperty('binaryRelease') : 'true'
if (releaseBinary == 'true') {
    artifacts {
        archives(binaryRelease('buildArchiveManifestJar', 'ArchiveManifest', 'org.tron.plugins.ArchiveManifest'))
    }
}

task copyToParent(type: Copy) {
    into "../build/distributions"
    from "$buildDir/distributions"
    include "*.zip"
}

def binaryRelease(taskName, jarName, mainClass) {
    return tasks.create("${taskName}", Jar) {
        baseName = jarName
        version = null
        from(sourceSets.main.output) {
            include "/**"
        }

        from {
            configurations.compile.collect {
                it.isDirectory() ? it : zipTree(it)
            }
        }

        manifest {
            attributes "Main-Class": "${mainClass}"
        }
    }
}

build.finalizedBy(copyToParent)